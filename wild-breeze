#!/usr/bin/perl

use v5.26;
use utf8;
use strict;
use warnings;

use FindBin     qw($Bin);
use lib         "$Bin";
use open        ":std", ":encoding(utf-8)";

use feature     qw(signatures);
no  warnings    qw(experimental::signatures);


use PerlIO;
use Data::Dumper;

use Breeze::Core;
use Breeze::I3;
use Carp;
use File::Slurp;
use Getopt::Long    qw(:config bundling);
use JSON::XS;
use Pod::Usage;
use IO::Handle;
use IO::Select;
use Try::Tiny;
use YAML::Syck;

#-------------------------------------------------------------------------------
# Configuration
#-------------------------------------------------------------------------------

$YAML::Syck::ImplicitTyping     = 1;
$YAML::Syck::ImplicitUnicode    = 1;

#-------------------------------------------------------------------------------
# Subroutines
#-------------------------------------------------------------------------------

sub read_config($filename) {
    open my $fh, "<:encoding(utf-8)", $filename
        or die "$filename: $!\n";

    return LoadFile($fh);
    # $fh gets closed when it goes out of scope
}

#-------------------------------------------------------------------------------
# Entry
#-------------------------------------------------------------------------------

# decode ARGV to utf8
utf8::decode($_) foreach @ARGV;

# initialize defaults and process options
my $defaults = {
    conf    => "$ENV{HOME}/.config/i3/breeze.yml",
    theme   => "$Bin/themes/default.yml",
};

my $options  = {};

GetOptions($options, qw(man|help h theme=s))
    or pod2usage({ -exitval => 1, -verbose => 1 });

if (@ARGV == 1) {
    $options->{conf} = $ARGV[0];
} elsif (@ARGV > 1) {
    print STDERR "Too many arguments.\nTry '$0 -h' for help.\n";
    exit 1;
}

# read configuration file
my $config_file = $options->{conf}  // $defaults->{conf};
$config_file = "$Bin/$config_file" if $config_file !~ m!^/!;
my $config = read_config($config_file);

# read theme
my $theme_file = $options->{theme} // $config->{theme} // $defaults->{theme};
$theme_file = "$Bin/$theme_file" if $theme_file !~ m!^/!;
my $theme  = read_config($theme_file);

# set up JSON event parser
my $ev_parser   = JSON::XS->new->utf8(0);
my $ev_started  = 0;

# set up Breeze and I3 stuff
my $i3     = Breeze::I3->new();
my $breeze = Breeze::Core->new($config, $theme);
my $log    = $breeze->log->clone(category => "wild-breeze");

# set up IO::Select
my $select = IO::Select->new(*STDIN)
    or $log->fatal("failed to set up IO::Select");

#-------------------------------------------------------------------------------

# turn off buffering
STDOUT->autoflush(1);
STDERR->autoflush(1);

# let's roll
$i3->start;

# enter the main loop
MAIN_LOOP:
while (1) {
    # print output
    my $data = try {
        return $breeze->run;
    } catch {
        chomp $_;
        $log->error("fatal error in run handler");
        $log->error($_);
        $log->fatal("cannot continue");
    };

    $i3->next($data);

    # wait for an event, at most a second by default
    foreach my $hndl ($select->can_read($config->{tick} // 1)) {
        my $line = <$hndl>;
        last MAIN_LOOP unless defined $line;
        chomp $line;

        # add data to parser
        $ev_parser->incr_parse($line);

        # first, get rid of leading '['
        if (!$ev_started && $ev_parser->incr_text =~ s/^\s*\[//) {
            $ev_started = 1;
        } elsif (!$ev_started) {
            next;
        }

        # exit if we encounter ']'
        if ($ev_parser->incr_text =~ s/^\s*\]//) {
            last MAIN_LOOP;
        }

        # remove separators and process events
        $ev_parser->incr_text =~ s/^\s*,//;
        while (my $event = $ev_parser->incr_parse) {
            $breeze->event($event);
            $ev_parser->incr_text =~ s/^\s*,//;
        }
    }
}

# vim: syntax=perl5-24
