#!/usr/bin/perl

use utf8;
use strict;
use warnings;

use feature     qw(signatures);
no  warnings    qw(experimental::signatures);

use Carp;
use File::Slurp;
use FindBin     qw($Bin);
use Getopt::Long    qw(:config bundling);
use Pod::Usage;
use IO::Handle;
use IO::Select;
use Try::Tiny;
use YAML::Syck;

use lib "$Bin";
use Breeze::Core;
use Breeze::I3;

#-------------------------------------------------------------------------------
# Configuration
#-------------------------------------------------------------------------------

$YAML::Syck::ImplicitTyping     = 1;
$YAML::Syck::ImplicitUnicode    = 1;

#-------------------------------------------------------------------------------
# Subroutines
#-------------------------------------------------------------------------------

sub read_config($filename) {
    open my $fh, "<:encoding(utf-8)", $filename
        or die "$filename: $!\n";

    return LoadFile($fh);
    # $fh gets closed when it goes out of scope
}

sub error_handler($i3, @message) {
    my $msg = join "", @message;
    chomp $msg;
    $msg =~ s/\n/ /g;

    $i3->error($msg);
    sleep 10;

    $i3->error("see logfile (or enable logging) for more details");
    sleep 10;
}

#-------------------------------------------------------------------------------
# Entry
#-------------------------------------------------------------------------------

# set encoding on standatd IO handles except STDIN, since we are going to use
# unbuffered sysread which cannot operate on fhs with utf-8 layers
# binmode STDIN, ":encoding(utf-8)";
binmode STDOUT, ":encoding(utf-8)";
binmode STDERR, ":encoding(utf-8)";

# decode ARGV to utf8
utf8::decode($_) foreach @ARGV;

# initialize defaults and process options
my $defaults = {
    conf    => "$ENV{HOME}/.config/i3/breeze.yml",
    theme   => "$Bin/themes/default.yml",
};

my $options  = {};

GetOptions($options, qw(man|help h theme=s debug|d stderr|e))
    or pod2usage({ -exitval => 1, -verbose => 1 });

pod2usage({ -exitval => 0, verbose => 1 }) if $options->{h};
pod2usage({ -exitval => 0, verbose => 2 }) if $options->{man};

if (@ARGV == 1) {
    $options->{conf} = $ARGV[0];
} elsif (@ARGV > 1) {
    print STDERR "Too many arguments.\nTry '$0 -h' for help.\n";
    exit 1;
}

# read configuration file
my $config_file = $options->{conf}  // $defaults->{conf};
$config_file = "$Bin/$config_file" if $config_file !~ m!^/!;
my $config = read_config($config_file);

# modify config according to some options
$config->{theme}    = $options->{theme} if defined $options->{theme};
$config->{debug}    = $options->{debug} if $options->{debug};
$config->{logfile}  = "%STDERR" if $options->{stderr};

# read theme
my $theme_file = $options->{theme} // $config->{theme} // $defaults->{theme};
$theme_file = "$Bin/$theme_file" if $theme_file !~ m!^/!;
my $theme  = read_config($theme_file);

# turn off buffering
STDOUT->autoflush(1);
STDERR->autoflush(1);

# set up I3 output
my $i3 = Breeze::I3->new();

$i3->start;
$i3->init_msg("starting wild-breeze");

local $SIG{__DIE__} = sub { error_handler($i3, @_); };

# initialize the core
my $breeze = Breeze::Core->new($config, $theme);
my $log    = $breeze->log->clone(category => "wild-breeze");

# set up IO::Select
my $select = IO::Select->new(*STDIN)
    or $log->fatal("failed to set up IO::Select");

#-------------------------------------------------------------------------------

# enter the main loop
MAIN_LOOP:
while (1) {
    # print output
    my $data = try {
        local $SIG{__DIE__} = undef;
        return $breeze->run;
    } catch {
        chomp $_;
        $log->error("fatal error in run handler");
        $log->error($_);

        error_handler($i3, $_);
        $log->fatal("cannot continue");
    };

    $i3->next($data);

    # wait for an event, at most a second by default
    foreach my $hndl ($select->can_read($config->{tick} // 1)) {
        my $ev_data;

        if (!sysread $hndl, $ev_data, 4096) {
            $log->debug("input stream ended prematurely");
            last MAIN_LOOP;
        }

        # decode data and feed it to i3
        utf8::decode($ev_data);
        next unless $i3->input($ev_data);

        # process all created events
        while (my $event = $i3->next_event) {
            try {
                local $SIG{__DIE__} = undef;
                $breeze->event($event);
            } catch {
                chomp $_;
                $log->error("fatal error in event handler");
                $log->error("$_");

                error_handler($i3, $_);
            };
        }
    }
}

# done
$i3->stop;
exit 0;

__END__

=head1 NAME

    wild-breeze -- i3status extensible replacement

=head1 SYNOPSIS

    wild-breeze [OPTIONS] [CONFIG_FILE]

=head1 OPTIONS AND ARGUMENTS

=over

=item C<-h>

Show brief help.

=item C<--man>,C<--help>

Show perlpod page.

=item C<--theme=FILE>

Path to theme to use.
This is only useful for testing, as the theme file should be specified
in the configuration file:

    theme: path-to-theme

=item C<-d>,C<--debug>

Turn on debugging messages. Overrides the configuration file.

=item C<-e>,C<--stderr>

Log to stderr. Overrides the configuration file.

=item CONFIG_FILE

Configuration file. If not specified, the default C<~/.config/i3/breeze.yml>
will be used instead.

=back

=head1 DESCRIPTION

Wild breeze is a replacement of i3status that offers easy extensibility
with modules (called B<leaves>).

=head2 Setup

Create a configuration file somewhere (e.g. C<~/.config/i3/breeze.yml>.
The file is written in L<YAML|https://docs.ansible.com/ansible/latest/YAMLSyntax.html>.
There should be an example configuration included with this program with
all configuration options explained.

Then, edit your i3bar configuration (usually in C<~/.config/i3/config> so
it says something similar to:

    bar {
        # font configuration
        path-to-wild-breeze path-to-config
    }

=head2 More information

Please see the project's wiki for more information about leaves and the program.

=head2 Troubleshooting (in general)

=over

=item make sure you installed I<all> required dependencies.

=item enable logging with debug to see what's going on

In config file:

    # $$ will be replaced by the PID
    logfile: /tmp/breeze.$$.log
    debug: yes

=item try running the program from command line to see if output makes sense, e.g.

    path-to-wild-breeze --stderr --debug path-to-config </dev/null

Redirecting the stdin to C</dev/null> will cause the program to run one iteration
only and end immediately.

=back
